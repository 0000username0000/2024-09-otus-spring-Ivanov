      create table author (
          id bigint generated by default as identity,
          full_name varchar(255),
          primary key (id)
      );

      create table book (
          id bigint generated by default as identity,
          title varchar(255),
          author_id bigint,
          primary key (id)
      );

      create table books_genres (
          genre_id bigint not null,
          book_id bigint not null
      );

      create table comment (
          id bigint generated by default as identity,
          text varchar(255),
          book_id bigint,
          primary key (id)
      );

      create table users (
          id bigint generated by default as identity,
          username varchar(255),
          password varchar(255),
          roles varchar(255),
          primary key (id)
      );

      CREATE TABLE roles (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name VARCHAR(255) NOT NULL UNIQUE
      );

      CREATE TABLE users_roles (
          user_id BIGINT NOT NULL,
          role_id BIGINT NOT NULL,
          PRIMARY KEY (user_id, role_id),
          FOREIGN KEY (user_id) REFERENCES users(id),
          FOREIGN KEY (role_id) REFERENCES roles(id)
      );

      create table genre (
          id bigint generated by default as identity,
          name varchar(255),
          primary key (id)
      );

      alter table if exists book
         add constraint fk_book_author
         foreign key (author_id)
         references author;

      alter table if exists books_genres
         add constraint fk_books_genres_book
         foreign key (book_id)
         references book;

      alter table if exists books_genres
         add constraint fk_books_genres_genre
         foreign key (genre_id)
         references genre;

      alter table if exists comment
         add constraint fk_comment_book
         foreign key (book_id)
         references book;

create table IF NOT EXISTS system_message (id integer not null, content varchar(255), primary key (id));

CREATE TABLE IF NOT EXISTS acl_sid (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  principal BOOLEAN NOT NULL,
  sid VARCHAR(100) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (sid, principal)
);

CREATE TABLE IF NOT EXISTS acl_class (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  class VARCHAR(255) NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (class)
);

CREATE TABLE IF NOT EXISTS acl_object_identity (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  object_id_class BIGINT NOT NULL,
  object_id_identity BIGINT NOT NULL,
  parent_object BIGINT DEFAULT NULL,
  owner_sid BIGINT DEFAULT NULL,
  entries_inheriting BOOLEAN NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (object_id_class, object_id_identity)
);

CREATE TABLE IF NOT EXISTS acl_entry (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY,
  acl_object_identity BIGINT NOT NULL,
  ace_order INT NOT NULL,
  sid BIGINT NOT NULL,
  mask INT NOT NULL,
  granting BOOLEAN NOT NULL,
  audit_success BOOLEAN NOT NULL,
  audit_failure BOOLEAN NOT NULL,
  PRIMARY KEY (id),
  UNIQUE (acl_object_identity, ace_order)
);

ALTER TABLE acl_entry
ADD FOREIGN KEY (acl_object_identity) REFERENCES acl_object_identity(id);

ALTER TABLE acl_entry
ADD FOREIGN KEY (sid) REFERENCES acl_sid(id);

ALTER TABLE acl_object_identity
ADD FOREIGN KEY (parent_object) REFERENCES acl_object_identity (id);

ALTER TABLE acl_object_identity
ADD FOREIGN KEY (object_id_class) REFERENCES acl_class (id);

ALTER TABLE acl_object_identity
ADD FOREIGN KEY (owner_sid) REFERENCES acl_sid (id);
